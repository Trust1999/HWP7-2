#include <iostream>
#include <fstream>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <cstring>

void configurePort(int fd) {
    struct termios tty;

    if (tcgetattr(fd, &tty) != 0) {
        std::cerr << "Error getting terminal attributes: " << strerror(errno) << std::endl;
        exit(EXIT_FAILURE);
    }

    // Baudrate einstellen (115200)
    cfsetospeed(&tty, B115200);
    cfsetispeed(&tty, B115200);

    // Modus: 8N1 (8 Datenbits, keine Parität, 1 Stoppbit)
    tty.c_cflag = (tty.c_cflag & ~CSIZE) | CS8;
    tty.c_cflag |= (CLOCAL | CREAD); // Lokale Verbindung, Lesen erlauben
    tty.c_cflag &= ~PARENB;          // Keine Parität
    tty.c_cflag &= ~CSTOPB;          // 1 Stoppbit
    tty.c_cflag &= ~CRTSCTS;         // Keine Hardware-Flowkontrolle

    tty.c_lflag = 0; // Keine Canonical-Modus, kein Echo

    tty.c_iflag &= ~(IXON | IXOFF | IXANY); // Keine Software-Flowkontrolle
    tty.c_iflag &= ~(ICRNL | INLCR); // Keine automatischen Zeilenkonvertierungen

    tty.c_oflag = 0; // Keine Ausgabeverarbeitung

    tty.c_cc[VMIN] = 1;  // Mindestens 1 Zeichen lesen
    tty.c_cc[VTIME] = 1; // Timeout von 0.1 Sekunden

    if (tcsetattr(fd, TCSANOW, &tty) != 0) {
        std::cerr << "Error setting terminal attributes: " << strerror(errno) << std::endl;
        exit(EXIT_FAILURE);
    }
}

int main() {
    const char* portName = "/dev/ttyUSB0"; // Seriellen Port anpassen

    // Seriellen Port öffnen
    int serialPort = open(portName, O_RDWR | O_NOCTTY | O_SYNC);
    if (serialPort < 0) {
        std::cerr << "Error opening serial port: " << strerror(errno) << std::endl;
        return EXIT_FAILURE;
    }

    configurePort(serialPort);

    std::cout << "Serial port configured successfully." << std::endl;

    // Daten an Arduino senden
    const char* message = "Hello, Arduino!\n";
    ssize_t bytesWritten = write(serialPort, message, strlen(message));
    if (bytesWritten < 0) {
        std::cerr << "Error writing to serial port: " << strerror(errno) << std::endl;
        close(serialPort);
        return EXIT_FAILURE;
    }

    std::cout << "Message sent to Arduino." << std::endl;

    // Antwort vom Arduino lesen
    char buffer[256];
    memset(buffer, 0, sizeof(buffer));
    ssize_t bytesRead = read(serialPort, buffer, sizeof(buffer) - 1);
    if (bytesRead < 0) {
        std::cerr << "Error reading from serial port: " << strerror(errno) << std::endl;
        close(serialPort);
        return EXIT_FAILURE;
    }

    std::cout << "Received from Arduino: " << buffer << std::endl;

    // Seriellen Port schließen
    close(serialPort);
    return 0;
}
